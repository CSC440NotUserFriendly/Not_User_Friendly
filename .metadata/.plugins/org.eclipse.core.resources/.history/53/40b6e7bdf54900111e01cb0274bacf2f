package com.csc440.nuf.components;

import java.lang.reflect.Field;

import org.xml.sax.Attributes;

/**
 * CSC-440 SMIL Project
 * 01-26-2011
 * SMILText.java
 * @author Brad Barker
 * 
 * 
 */

public class SMILText extends AbstractSMILObject {
	
	//If we want to modify text here then we can make this a StringBuilder.
	private final String QNAME = "smilText";
	private String xmlid; //xml:id
	private String textAlign; //textAlign
	private int topMargin; //top
	private int leftMargin; //left
	private String textColor; //textColor
	private int textFontSize; //textFontSize
	private int zIndex; //z-index
	private String text; 

	public SMILText(Attributes att) {
		
		super(att); //For setting common elements
		
		for(int i=0; i<att.getLength(); i++){
			
			String localName = att.getLocalName(i);
			String value = att.getValue(localName);
			
			if(localName.equals("xml:id"))
				xmlid = value;
			
			else if(localName.equals("textAlign"))
                textAlign = value;
			
			else if(localName.equals("top"))
                topMargin = getIntValue(value);
			
			else if(localName.equals("left"))
                leftMargin = getIntValue(value);
			
			else if(localName.equals("textColor"))
                textColor = value;
			
			else if(localName.equals("textFontSize"))
                textFontSize = getIntValue(value);
			
			else if(localName.equals("z-index")){
				zIndex = getIntValue(value);
			}
        }
	}
	
	public String getText() {
		return text;
	}
	
	//Important, the text is obtained through the characters() method not startElement()
	public void setText(String text) {
		this.text = text;
	}

	//For XML format
	@Override
	public String printData() {
		
		StringBuilder output = new StringBuilder();
		String openTag = "<%s";
		String endTag = "</%s>";
		
		Field [] f = this.getClass().getDeclaredFields();
		
		output.append(String.format(begin, this.QNAME));
		
		for(int i=0; i<f.length; i++){
			try {
				
				f[i].setAccessible(true); //Allows access to private fields!
				output.append(f[i].getName() + " = " + f[i].get(this));
				
			} 
			catch (IllegalAccessException e) {
				output.append(f[i].getName() + " : " + "Unable to access\n");
			}
			
		}
		return output.toString();

	}
	

	public String getXmlid() {
		return xmlid;
	}

	public void setXmlid(String xmlid) {
		this.xmlid = xmlid;
	}

	public String getTextAlign() {
		return textAlign;
	}

	public void setTextAlign(String textAlign) {
		this.textAlign = textAlign;
	}

	public int getTopMargin() {
		return topMargin;
	}

	public void setTopMargin(int topMargin) {
		this.topMargin = topMargin;
	}

	public int getLeftMargin() {
		return leftMargin;
	}

	public void setLeftMargin(int leftMargin) {
		this.leftMargin = leftMargin;
	}

	public String getTextColor() {
		return textColor;
	}

	public void setTextColor(String textColor) {
		this.textColor = textColor;
	}

	public int getTextFontSize() {
		return textFontSize;
	}

	public void setTextFontSize(int textFontSize) {
		this.textFontSize = textFontSize;
	}

	public int getzIndex() {
		return zIndex;
	}

	public void setzIndex(int zIndex) {
		this.zIndex = zIndex;
	}


}
